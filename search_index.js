var documenterSearchIndex = {"docs":
[{"location":"WalkThrough/#Walk-through","page":"A basic walk through","title":"Walk through","text":"","category":"section"},{"location":"WalkThrough/","page":"A basic walk through","title":"A basic walk through","text":"To emulate this verification protocol. Start by activating your local project","category":"page"},{"location":"WalkThrough/","page":"A basic walk through","title":"A basic walk through","text":"using Pkg\nPkg.activate(\".\")","category":"page"},{"location":"WalkThrough/","page":"A basic walk through","title":"A basic walk through","text":"If RobustVerificationSimulator.jlhas not been installed, then","category":"page"},{"location":"WalkThrough/","page":"A basic walk through","title":"A basic walk through","text":"] add https://github.com/fieldofnodes/RobustVerificationSimulator.jl","category":"page"},{"location":"WalkThrough/","page":"A basic walk through","title":"A basic walk through","text":"then","category":"page"},{"location":"WalkThrough/","page":"A basic walk through","title":"A basic walk through","text":"using RobustVerificationSimulator","category":"page"},{"location":"WalkThrough/","page":"A basic walk through","title":"A basic walk through","text":"We simulate a random graph to represent our circuit with the following values.","category":"page"},{"location":"WalkThrough/","page":"A basic walk through","title":"A basic walk through","text":"p₁ = p₂ = 0.5\nN = 1000\nv = 5\ne = 8\nreps=100","category":"page"},{"location":"WalkThrough/","page":"A basic walk through","title":"A basic walk through","text":"Here p₁ and p₂ are probability values used for stochastic sampling while the simulator software is being developed. Once completed this functionality will be replaced with the appropriate function calls. The number of rounds is represented by N, v and e represent the number of vertices and edges in the graph. In the circuit each v is a qubit and each e is the CZ gate establishing entanglement between the qubits. Finally reps is the number of repetitions used to approximate a graph colouring.","category":"page"},{"location":"WalkThrough/","page":"A basic walk through","title":"A basic walk through","text":"graph_for_client = generate_simple_graph(v,e)","category":"page"},{"location":"WalkThrough/","page":"A basic walk through","title":"A basic walk through","text":"We generate a graph with v vertices and e edges. For the time being this graph is contructed randomly. We call this 'graphforclient` to indicate this graph is still on the client side of the protocol. Once we are ready to send this graph to the server, we then bound the graph to a different label, namely an indication that the graph is for the server.","category":"page"},{"location":"WalkThrough/","page":"A basic walk through","title":"A basic walk through","text":"The output","category":"page"},{"location":"WalkThrough/","page":"A basic walk through","title":"A basic walk through","text":"{5, 8} undirected simple Int64 graph","category":"page"},{"location":"WalkThrough/","page":"A basic walk through","title":"A basic walk through","text":"We take graph_for_client and convert it to a MetaGraph, this is a graph which allow properties to be set to the graph, qubits or edges. As we have not implemented the quantum simulator yet, we construct this meta graph. These properties attached can be the angles and the qubit type. This graph is prepared for the Computation round. The graph associated with the Test rounds will be generated in a for loop. ","category":"page"},{"location":"WalkThrough/","page":"A basic walk through","title":"A basic walk through","text":"meta_graph_for_client = @chain graph_for_client begin\n    MetaGraph(_)\n    generate_property_graph!(_,Computation())\nend","category":"page"},{"location":"WalkThrough/","page":"A basic walk through","title":"A basic walk through","text":"The output","category":"page"},{"location":"WalkThrough/","page":"A basic walk through","title":"A basic walk through","text":"{5, 8} undirected Int64 metagraph with Float64 weights defined by :weight (default weight 1.0)","category":"page"},{"location":"WalkThrough/","page":"A basic walk through","title":"A basic walk through","text":"g_cols = generate_random_greedy_color(graph_for_client,reps)    ","category":"page"},{"location":"WalkThrough/","page":"A basic walk through","title":"A basic walk through","text":"Here g_cols is the coloring of graph_for_client which is optimised over the reps","category":"page"},{"location":"WalkThrough/","page":"A basic walk through","title":"A basic walk through","text":"The output","category":"page"},{"location":"WalkThrough/","page":"A basic walk through","title":"A basic walk through","text":"Graphs.Coloring{Int64}(3, [1, 3, 2, 3, 1])","category":"page"},{"location":"WalkThrough/","page":"A basic walk through","title":"A basic walk through","text":"The first element, 3, represents the number of colors, and [1, 3, 2, 3, 1] represents the coloring. We then need to separate each colour and bind it to another graph for our Test rounds.","category":"page"},{"location":"WalkThrough/","page":"A basic walk through","title":"A basic walk through","text":"We can run","category":"page"},{"location":"WalkThrough/","page":"A basic walk through","title":"A basic walk through","text":"contruct_coloring_plot_for_all_colors(graph_for_client,g_cols.colors)","category":"page"},{"location":"WalkThrough/","page":"A basic walk through","title":"A basic walk through","text":"to get a plot for the colouring.","category":"page"},{"location":"WalkThrough/","page":"A basic walk through","title":"A basic walk through","text":"g_diff_cols = separate_each_color(g_cols)","category":"page"},{"location":"WalkThrough/","page":"A basic walk through","title":"A basic walk through","text":"We create a g_diff_cols a vector of vectors, each one is a different colouring of the graph.","category":"page"},{"location":"WalkThrough/","page":"A basic walk through","title":"A basic walk through","text":"3-element Vector{Vector{Int64}}:\n [2, 1, 1, 1, 2]\n [1, 1, 2, 1, 1]\n [1, 2, 1, 2, 1]","category":"page"},{"location":"WalkThrough/","page":"A basic walk through","title":"A basic walk through","text":"Each vector is a different colouring. The top vector [2, 1, 1, 1, 2] is a single colour set. Elements that are 1 are the Dummy qubits and 2 are the Test qubits.","category":"page"},{"location":"#RobustVerification.jl","page":"Home","title":"RobustVerification.jl","text":"","category":"section"},{"location":"","page":"Home","title":"Home","text":"","category":"page"},{"location":"","page":"Home","title":"Home","text":"    CurrentModule = RobustVerificationSimulator","category":"page"},{"location":"#Structs","page":"Home","title":"Structs","text":"","category":"section"},{"location":"","page":"Home","title":"Home","text":"    Redo","category":"page"},{"location":"#RobustVerificationSimulator.Redo","page":"Home","title":"RobustVerificationSimulator.Redo","text":"Redo round type\n\n\n\n\n\n","category":"type"},{"location":"","page":"Home","title":"Home","text":"    Test","category":"page"},{"location":"#RobustVerificationSimulator.Test","page":"Home","title":"RobustVerificationSimulator.Test","text":"Round Test type\n\n\n\n\n\n","category":"type"},{"location":"","page":"Home","title":"Home","text":"    Computation","category":"page"},{"location":"#RobustVerificationSimulator.Computation","page":"Home","title":"RobustVerificationSimulator.Computation","text":"Round Computation type\n\n\n\n\n\n","category":"type"},{"location":"","page":"Home","title":"Home","text":"    Trap","category":"page"},{"location":"#RobustVerificationSimulator.Trap","page":"Home","title":"RobustVerificationSimulator.Trap","text":"Qubit Trap type\n\n\n\n\n\n","category":"type"},{"location":"","page":"Home","title":"Home","text":"    Dummy","category":"page"},{"location":"#RobustVerificationSimulator.Dummy","page":"Home","title":"RobustVerificationSimulator.Dummy","text":"Qubit Dummy type\n\n\n\n\n\n","category":"type"},{"location":"","page":"Home","title":"Home","text":"    ComputationQubit","category":"page"},{"location":"#RobustVerificationSimulator.ComputationQubit","page":"Home","title":"RobustVerificationSimulator.ComputationQubit","text":"Qubit ComputationQubit type\n\n\n\n\n\n","category":"type"},{"location":"","page":"Home","title":"Home","text":"    Input","category":"page"},{"location":"#RobustVerificationSimulator.Input","page":"Home","title":"RobustVerificationSimulator.Input","text":"Qubit Input type\n\n\n\n\n\n","category":"type"},{"location":"","page":"Home","title":"Home","text":"    NotInput","category":"page"},{"location":"#RobustVerificationSimulator.NotInput","page":"Home","title":"RobustVerificationSimulator.NotInput","text":"Qubit NotInput type\n\n\n\n\n\n","category":"type"},{"location":"","page":"Home","title":"Home","text":"    Ok","category":"page"},{"location":"#RobustVerificationSimulator.Ok","page":"Home","title":"RobustVerificationSimulator.Ok","text":"Round outcome type\n\n\n\n\n\n","category":"type"},{"location":"","page":"Home","title":"Home","text":"    Abort","category":"page"},{"location":"#RobustVerificationSimulator.Abort","page":"Home","title":"RobustVerificationSimulator.Abort","text":"Round Abort type\n\n\n\n\n\n","category":"type"},{"location":"#Graph-based-functions","page":"Home","title":"Graph based functions","text":"","category":"section"},{"location":"","page":"Home","title":"Home","text":"    generate_simple_graph","category":"page"},{"location":"#RobustVerificationSimulator.generate_simple_graph","page":"Home","title":"RobustVerificationSimulator.generate_simple_graph","text":"From number of vertices and edges (v,e)-> Graph\n\n\n\n\n\n","category":"function"},{"location":"","page":"Home","title":"Home","text":"    generate_random_greedy_color","category":"page"},{"location":"#RobustVerificationSimulator.generate_random_greedy_color","page":"Home","title":"RobustVerificationSimulator.generate_random_greedy_color","text":"Use Graphs.randomgreedycolor(g, reps) -> Graphs.Coloring{Int64} Uses a greedy approximation to get a colouring of a graph\n\n\n\n\n\n","category":"function"},{"location":"","page":"Home","title":"Home","text":"    separate_each_color","category":"page"},{"location":"#RobustVerificationSimulator.separate_each_color","page":"Home","title":"RobustVerificationSimulator.separate_each_color","text":"Extracts from a Graphs.Coloring{Int64} -> Vector{Vector{Int64}} Once a coloring is selected a vector of integers will result 1 -> Dummy vertex 2 -> Trap\n\n\n\n\n\n","category":"function"},{"location":"","page":"Home","title":"Home","text":"    get_random_coloring","category":"page"},{"location":"#RobustVerificationSimulator.get_random_coloring","page":"Home","title":"RobustVerificationSimulator.get_random_coloring","text":"Extracts from Vector{Vector{Int64}} -> Vector{Int64} Draw uniform one colouring arangments\n\n\n\n\n\n","category":"function"},{"location":"","page":"Home","title":"Home","text":"    generate_property_graph!","category":"page"},{"location":"#RobustVerificationSimulator.generate_property_graph!","page":"Home","title":"RobustVerificationSimulator.generate_property_graph!","text":"From (MetaGraph{Int64, \n    Union{Test,Computation},\n    Float64},Vector{Int64}) - >\n        MetaGraph{Int64, Float64}\nThe random approximate independnet set  is used to label the graph\nAccording to the Trap and Dummy\nThis function affects the input meta graph so it had a !\nFor Trap a random angle is sent over\nFor Dummy random 0 or 1\n\n\n\n\n\nFrom (MetaGraph{Int64, Float64},Union{Test,Computation}) - >\n        MetaGraph{Int64, Float64}\nTake SimpleGraph, just converted to MetaGraph and add angles.\nNote: this may be a temporary solutions, I need to implement \nan input and output set for the vertices\n\n\n\n\n\n","category":"function"},{"location":"#Plot-graph-colourings","page":"Home","title":"Plot graph colourings","text":"","category":"section"},{"location":"","page":"Home","title":"Home","text":"    contruct_coloring_plot_for_one_color","category":"page"},{"location":"#RobustVerificationSimulator.contruct_coloring_plot_for_one_color","page":"Home","title":"RobustVerificationSimulator.contruct_coloring_plot_for_one_color","text":"Plot graph g with the random coloring stipulated from functions:\n1. generate_random_greedy_color\n2. g_col = get_random_coloring\n\n\n\n\n\n","category":"function"},{"location":"","page":"Home","title":"Home","text":"    contruct_coloring_plot_for_all_colors","category":"page"},{"location":"#RobustVerificationSimulator.contruct_coloring_plot_for_all_colors","page":"Home","title":"RobustVerificationSimulator.contruct_coloring_plot_for_all_colors","text":"Plot graph g with the random coloring stipulated from functions:\n1. generate_random_greedy_color\n2. g_col = get_random_coloring\n\n\n\n\n\n","category":"function"},{"location":"","page":"Home","title":"Home","text":"    contruct_coloring_plot_for_no_colors","category":"page"},{"location":"#RobustVerificationSimulator.contruct_coloring_plot_for_no_colors","page":"Home","title":"RobustVerificationSimulator.contruct_coloring_plot_for_no_colors","text":"Plot graph whith no coloring\n\n\n\n\n\n","category":"function"},{"location":"#Round-functions","page":"Home","title":"Round functions","text":"","category":"section"},{"location":"","page":"Home","title":"Home","text":"Including functions dealing with  Computation or Test and further for Trap or Dummy qubit tyes.","category":"page"},{"location":"","page":"Home","title":"Home","text":"    choose_test_computation","category":"page"},{"location":"#RobustVerificationSimulator.choose_test_computation","page":"Home","title":"RobustVerificationSimulator.choose_test_computation","text":"Input a probability -> Union{Test,Computation}\n\n\n\n\n\n","category":"function"},{"location":"","page":"Home","title":"Home","text":"    return_ok_or_abort","category":"page"},{"location":"#RobustVerificationSimulator.return_ok_or_abort","page":"Home","title":"RobustVerificationSimulator.return_ok_or_abort","text":"Input a probability -> Union{OK,Abort}\n\n\n\n\n\n","category":"function"},{"location":"","page":"Home","title":"Home","text":"    get_round_result","category":"page"},{"location":"#RobustVerificationSimulator.get_round_result","page":"Home","title":"RobustVerificationSimulator.get_round_result","text":"Take (round_type,p) -> Union{OK,Abort}\n\n\n\n\n\n","category":"function"},{"location":"","page":"Home","title":"Home","text":"    qubit_information","category":"page"},{"location":"#RobustVerificationSimulator.qubit_information","page":"Home","title":"RobustVerificationSimulator.qubit_information","text":"Trap() -> get kπ/4 k∈0..7\n\n\n\n\n\nDummy() -> 0,1\n\n\n\n\n\nComputation() -> get kπ/4 k∈0..7\n\n\n\n\n\n","category":"function"},{"location":"","page":"Home","title":"Home","text":"    compare_trap_test","category":"page"},{"location":"#RobustVerificationSimulator.compare_trap_test","page":"Home","title":"RobustVerificationSimulator.compare_trap_test","text":"Function, which will iterate over vertices\nwill yield if the round passed or failed\n\n\n\n\n\n","category":"function"},{"location":"#Redo-function","page":"Home","title":"Redo function","text":"","category":"section"},{"location":"","page":"Home","title":"Home","text":"    do_redo","category":"page"},{"location":"#RobustVerificationSimulator.do_redo","page":"Home","title":"RobustVerificationSimulator.do_redo","text":"Input two proabailites (u,p) -> u\nIf uₜₑₛₜ < p -> draw new u ~ U(0,1)\nelse return u\n\n\n\n\n\n","category":"function"},{"location":"#Compute-angle-function","page":"Home","title":"Compute angle function","text":"","category":"section"},{"location":"","page":"Home","title":"Home","text":"    compute_δᵥ","category":"page"},{"location":"#RobustVerificationSimulator.compute_δᵥ","page":"Home","title":"RobustVerificationSimulator.compute_δᵥ","text":"Computation of δᵥ Case\n\nRound ≡ Test ∩ Qubit ≡ Dummy  → δᵥ = {kπ/r | k ∼ U(0..7)}\n\n\n\n\n\nComputation of δᵥ Case\n\nRound ≡ Test ∩ Qubit ≡ Trap  → δᵥ = θᵥ + rᵥπ\n\n\n\n\n\nComputation of δᵥ Case\n\nRound ≡ Computation ∩ Qubit ∈ Input set  → δᵥ = ϕᵥ + (θᵥ + xᵥπ) + rᵥπ\n\n\n\n\n\nComputation of δᵥ Case\n\nRound ≡ Computation ∩ Qubiut ∉ Input set  → δᵥ = ϕᵥ′ + θᵥ + rᵥπ\n\n\n\n\n\nTemporary function till I implement/figure out the      input/output set Computation of δᵥ Case\n\nRound ≡ Computation ∩ Qubiut ∉ Input set  → δᵥ = ϕᵥ′ + θᵥ + rᵥπ\n\n\n\n\n\n","category":"function"},{"location":"#Helper-functions","page":"Home","title":"Helper functions","text":"","category":"section"},{"location":"","page":"Home","title":"Home","text":"    get_ratio_between_two_types","category":"page"},{"location":"#RobustVerificationSimulator.get_ratio_between_two_types","page":"Home","title":"RobustVerificationSimulator.get_ratio_between_two_types","text":"Get ratio of occurence between two types\n\n\n\n\n\n","category":"function"},{"location":"","page":"Home","title":"Home","text":"    rand_int","category":"page"},{"location":"#RobustVerificationSimulator.rand_int","page":"Home","title":"RobustVerificationSimulator.rand_int","text":"Draw random integer either 0 or 1\n\n\n\n\n\n","category":"function"},{"location":"","page":"Home","title":"Home","text":"    probability_asser","category":"page"},{"location":"#RobustVerificationSimulator.probability_asser","page":"Home","title":"RobustVerificationSimulator.probability_asser","text":"Assert that a number is between 0 and 1 and asserts that \nthis true.\n\n\n\n\n\n","category":"function"},{"location":"","page":"Home","title":"Home","text":"    error_call_not_test_computation","category":"page"},{"location":"#RobustVerificationSimulator.error_call_not_test_computation","page":"Home","title":"RobustVerificationSimulator.error_call_not_test_computation","text":"Call if the condition of Test or Computation is not meant\n\n\n\n\n\n","category":"function"},{"location":"#Index","page":"Home","title":"Index","text":"","category":"section"},{"location":"","page":"Home","title":"Home","text":"","category":"page"}]
}
